{"version":3,"sources":["utils/validators/validators.jsx","components/Product/Product.js","components/shared/CustomFIeld/CustomField.js","components/ProductCreator/ProductCreator.js","redux/appReducer.js","redux/appSelectors.js","App.js","serviceWorker.js","redux/store.js","index.js","components/shared/CustomFIeld/CustomField.module.scss"],"names":["max","useStyles","makeStyles","error","boxShadow","Product","id","name","count","cost","totalCost","removeProduct","changeProductCount","changeProductCost","useState","isEditCount","setIsEditCount","isEditCost","setIsEditCost","isError","setIsError","tempValue","setTempValue","onChange","e","currentTarget","value","TableRow","key","TableCell","component","scope","align","onDoubleClick","onBlur","className","type","autoFocus","onKeyPress","console","log","IconButton","aria-label","onClick","onRemove","required","undefined","number","isNaN","Number","CustomField","input","meta","touched","props","hasError","typeField","types","styles","max25","length","form","padding","background","borderRadius","inputGroup","marginBottom","display","justifyContent","marginLeft","border","button","width","classError","color","textTransform","ProductCreatorForm","reduxForm","handleSubmit","classes","onSubmit","Field","placeholder","validate","Button","variant","ADD_PRODUCT","initialState","products","appReducer","state","action","newProductId","map","product","filter","getAppProducts","app","paper","maxWidth","table","minWidth","body","height","overflowY","connect","addProduct","data","TableContainer","Paper","Table","TableHead","TableBody","row","colSpan","reduce","acc","Boolean","window","location","hostname","match","reducers","combineReducers","formReducer","store","createStore","applyMiddleware","thunkMiddleware","__store__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"qMAE0BA,E,oKCKpBC,EAAYC,YAAW,CACzBC,MAAO,CACHC,UAAW,iBA0FJC,EAtFC,SAAC,GAA8F,IAA7FC,EAA4F,EAA5FA,GAAIC,EAAwF,EAAxFA,KAAMC,EAAkF,EAAlFA,MAAOC,EAA2E,EAA3EA,KAAMC,EAAqE,EAArEA,UAAWC,EAA0D,EAA1DA,cAAeC,EAA2C,EAA3CA,mBAExDT,GAFmG,EAAvBU,kBACnEZ,IACTE,OAFmG,EAIpEW,oBAAS,GAJ2D,mBAInGC,EAJmG,KAItFC,EAJsF,OAKtEF,oBAAS,GAL6D,mBAKnGG,EALmG,KAKvFC,EALuF,OAM5EJ,oBAAS,GANmE,mBAMnGK,EANmG,KAM1FC,EAN0F,OAOxEN,mBAAS,MAP+D,mBAOnGO,EAPmG,KAOxFC,EAPwF,KAwBpGC,EAAW,SAACC,GACdF,EAAaE,EAAEC,cAAcC,QAGjC,OACI,kBAACC,EAAA,EAAD,CAAUC,IAAKtB,GACX,kBAACuB,EAAA,EAAD,CAAWC,UAAU,KACVC,MAAM,OACZxB,GAEL,kBAACsB,EAAA,EAAD,CAAWG,MAAM,QACNC,cAAe,WACXX,EAAa,IACbN,GAAe,IAEnBkB,OAAQ,WAEJlB,GAAe,MAIxBD,GAAeP,EAChBO,GAAe,2BAAOoB,UAAYhB,GAAWhB,GAAU,GACjCiC,KAAK,OACLC,WAAW,EACXd,SAAUA,EACVe,WArCf,SAACd,GACH,UAAVA,EAAEI,MACe,MAAbP,GACAkB,QAAQC,WAAYnB,GACpBT,EAAmBN,GAAKe,GACxBL,GAAe,IAEfI,GAAW,QAiCf,kBAACS,EAAA,EAAD,CAAWG,MAAM,QACNC,cAAe,WACXf,GAAc,GACdI,EAAa,KAEjBY,OAAQ,WACJhB,GAAc,MAIvBD,GAAcR,EACfQ,GAAc,2BAAOkB,UAAYhB,GAAWhB,GAAU,GACjCiC,KAAK,OACLC,WAAW,EACXd,SAAUA,KAGpC,kBAACM,EAAA,EAAD,CAAWG,MAAM,SACZtB,GAEL,kBAACmB,EAAA,EAAD,CAAWG,MAAM,SACb,kBAACS,EAAA,EAAD,CAAYC,aAAW,SACXC,QAAS,YAlEhB,SAACrC,GACdK,EAAcL,GAkEUsC,CAAStC,KAGrB,kBAAC,IAAD,U,2BD5FPuC,EAAW,SAAAnB,GAAK,OAAc,MAATA,OAAgBoB,EAAY,2BACjDC,EAAS,SAAArB,GAAK,OAAIA,GAASsB,MAAMC,OAAOvB,IAAU,wBAAqBoB,G,0BEgBnEI,EAdG,SAAC,GAAoD,IAAnDC,EAAkD,EAAlDA,MAAkD,KAA5CC,KAA4C,EAAtCA,MAAOC,EAA+B,EAA/BA,QAASlD,EAAsB,EAAtBA,MAAWmD,EAAW,uCAChEC,EAAWF,GAAWlD,EACtBqD,EAAYF,EAAMG,MACjBnD,EAAMgD,EAANhD,GACL,OACI,yBAAK6B,UAAS,UAAKuB,IAAO,gBAAZ,YAA+BH,EAAWG,IAAOvD,MAAQ,KACpD,UAAdqD,GAAyB,2CAAWL,EAAWG,EAAtB,CAA6BnB,UAAWuB,IAAOP,MAAO7C,GAAIA,MAClFkD,GAAa,mCAEdD,GAAY,6BAAMpD,KCLzBwD,GHLoB3D,EGKF,GHLU,SAAA0B,GAAK,OAAIA,EAAMkC,OAAS5D,EAAf,wCAAsDA,EAAtD,oBAAyE8C,IGO9G7C,EAAYC,YAAW,CACzB2D,KAAM,CACFC,QAAS,GACTC,WAAY,OACZC,aAAc,GACd5D,UAAW,iBAEf6D,WAAY,CACRC,aAAc,GACdC,QAAS,OACTC,eAAgB,iBAEpBjB,MAAO,CACHkB,WAAY,GACZL,aAAc,EACdM,OAAQ,kBACRR,QAAS,YAEbS,OAAQ,CACJC,MAAO,QAEXC,WAAY,CACRC,MAAO,MACPC,cAAe,YACfb,QAAS,MA2DFc,EAHYC,YAAU,CAAChB,KAAM,kBAAjBgB,EAnDJ,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,aAAc3E,EAAW,EAAXA,MAC7B4E,EAAU9E,IACTgE,EAA+Cc,EAA/Cd,WAAYd,EAAmC4B,EAAnC5B,MAAOoB,EAA4BQ,EAA5BR,OAAQV,EAAoBkB,EAApBlB,KAAMY,EAAcM,EAAdN,WAExC,OACI,oCACI,0BAAMtC,UAAW0B,EAAMmB,SAAUF,GAC5B3E,GAAS,yBAAKgC,UAAWsC,IAC1B,yBAAKtC,UAAW8B,GAAhB,gBAEI,kBAACgB,EAAA,EAAD,CAAO9C,UAAWgB,EACXf,KAAK,OACL8C,YAAY,eACZ3E,KAAK,OACLuB,UAAWoB,EACXiC,SAAU,CAACtC,EAAUc,GACrBF,MAAM,WAGjB,yBAAKtB,UAAW8B,GAAhB,iBAEI,kBAACgB,EAAA,EAAD,CAAO9C,UAAWgB,EACXf,KAAK,OACL8C,YAAY,gBACZ3E,KAAK,QACLuB,UAAWoB,EACXiC,SAAU,CAACtC,EAAUE,GACrBU,MAAM,WAGjB,yBAAKtB,UAAW8B,GAAhB,gBAEI,kBAACgB,EAAA,EAAD,CAAO9C,UAAWgB,EACXf,KAAK,OACL8C,YAAY,eACZ3E,KAAK,OACLuB,UAAWoB,EACXiC,SAAU,CAACtC,EAAUE,GACrBU,MAAM,WAGjB,kBAAC2B,EAAA,EAAD,CAAQjD,UAAWoC,EACXc,QAAQ,YACRX,MAAM,UACNtC,KAAK,UAHb,oB,iBC/EVkD,EAAc,yBAKhBC,EAAe,CACfC,SAAU,CACN,CAAClF,GAAI,EAAGC,KAAM,UAAWC,MAAO,EAAGC,KAAM,GAAIC,UAAW,MACxD,CAACJ,GAAI,EAAGC,KAAM,QAASC,MAAO,EAAGC,KAAM,GAAIC,UAAW,MACtD,CAACJ,GAAI,EAAGC,KAAM,cAAeC,MAAO,EAAGC,KAAM,IAAMC,UAAW,QAwEvD+E,EApEE,WAAmC,IAAlCC,EAAiC,uDAAzBH,EAAcI,EAAW,uCAE/C,OAAQA,EAAOvD,MACX,KAAKkD,EACD,IAAIM,EAAeF,EAAMF,SAASK,KAAI,SAAAC,GAAO,OAAIA,EAAQxF,GAAK,KAC9D,OAAO,2BACAoF,GADP,IAEIF,SAAS,GAAD,mBACDE,EAAMF,UADL,cAEHlF,GAAIsF,GAAiBD,OAGlC,IAxBe,4BAyBX,OAAO,2BACAD,GADP,IAEIF,SAAUE,EAAMF,SAASO,QAAO,SAAAD,GAAO,OAAIA,EAAQxF,KAAOqF,EAAOrF,QAGzE,IA7BqB,kCA8BjB,OAAO,2BACAoF,GADP,IAEIF,SAAUE,EAAMF,SAASK,KAAI,SAAAC,GACzB,OAAIA,EAAQxF,KAAOqF,EAAOrF,GACf,2BACAwF,GADP,IAEItF,MAAOmF,EAAOnF,MACdE,UAAWoF,EAAQrF,KAAOqF,EAAQtF,QAG/BsF,OAInB,IA3CgB,iCA4ChB,OAAO,2BACAJ,GADP,IAEIF,SAAUE,EAAMF,SAASK,KAAI,SAAAC,GACzB,OAAIA,EAAQxF,KAAOqF,EAAOrF,GACf,2BACAwF,GADP,IAEIrF,KAAMkF,EAAOlF,KACbC,UAAWoF,EAAQrF,KAAOqF,EAAQtF,QAG/BsF,OAKvB,QACI,OAAO,2BACAJ,GADP,IAEIF,SAAUE,EAAMF,SAASK,KAAI,SAAAC,GACzB,OAAO,2BACAA,GADP,IAEIpF,UAAWoF,EAAQrF,KAAOqF,EAAQtF,eCpE7CwF,EAAiB,SAACN,GAAD,OAAWA,EAAMO,IAAIT,UCgB7CvF,EAAYC,YAAW,CAEzBgG,MAAO,CACHC,SAAU,IACV/F,UAAW,iBAEfgG,MAAO,CACHC,SAAU,KAGdC,KAAM,CACFC,OAAQ,QACRC,UAAW,UAwDJC,eAHO,SAACf,GAAD,MAAY,CAC9BF,SAAUQ,EAAeN,MAEW,CAACgB,WFTf,SAAC,GAAD,IAAEnG,EAAF,EAAEA,KAAMC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KAAf,MAA0B,CAAC2B,KAAMkD,EAAa/E,OAAMC,QAAOC,SEShCE,cFRxB,SAACL,GAAD,MAAS,CAAC8B,KA3EhB,4BA2EsC9B,OEQOM,mBFPlC,SAACN,EAAIE,GAAL,MAAgB,CAAC4B,KA3EtB,kCA2EkD9B,KAAIE,UEOKK,kBFNvD,SAACP,EAAIG,GAAL,MAAe,CAAC2B,KA3ErB,iCA2EgD9B,KAAIG,UEMjEgG,EApDH,SAAC,GAAkF,IAAjFjB,EAAgF,EAAhFA,SAAUkB,EAAsE,EAAtEA,WAAY/F,EAA0D,EAA1DA,cAAeC,EAA2C,EAA3CA,mBAAoBC,EAAuB,EAAvBA,kBAC7DkE,EAAU9E,IACTiG,EAAsBnB,EAAtBmB,MAAOE,EAAerB,EAAfqB,MAAOE,EAAQvB,EAARuB,KAKrB,OACI,yBAAKnE,UAAU,OACX,kBAAC,EAAD,CAAoB6C,SALX,SAAC2B,GACdD,EAAWC,MAKP,yBAAKxE,UAAU,cACX,kBAACyE,EAAA,EAAD,CAAgBzE,UAAW+D,EACXpE,UAAW+E,KAEvB,kBAACC,EAAA,EAAD,CAAO3E,UAAWiE,EACX1D,aAAW,gBAEd,kBAACqE,EAAA,EAAD,KACI,kBAACpF,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,aACA,kBAACA,EAAA,EAAD,CAAWG,MAAM,SAAjB,SACA,kBAACH,EAAA,EAAD,CAAWG,MAAM,SAAjB,cACA,kBAACH,EAAA,EAAD,CAAWG,MAAM,SAAjB,gBAGR,kBAACgF,EAAA,EAAD,CAAW7E,UAAWmE,GACjBd,EAASK,KAAI,SAACoB,GAAD,OAAS,kBAAC,EAAD,iBAAaA,EAAb,CACSrF,IAAKqF,EAAI3G,GACTK,cAAeA,EACfC,mBAAoBA,EACpBC,kBAAmBA,SAGvD,+BACA,kBAACc,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAWqF,QAAS,IACpB,kBAACrF,EAAA,EAAD,CAAWqF,QAAS,GAAG,2CACvB,kBAACrF,EAAA,EAAD,CAAWG,MAAM,SAAjB,IAA0B,2BACrBwD,EAAS2B,QAAO,SAACC,EAAD,UAAuBA,EAAvB,EAAO1G,YAAkC,cC1DtE2G,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8BCbFC,EAAWC,YAAgB,CAC3B1B,IAAKR,EACL5B,KAAM+D,MAGJC,EAAQC,YAAYJ,EAAUK,YAAgBC,MACpDV,OAAOW,UAAYJ,EAEJA,QCLfK,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUP,MAAOA,GACb,kBAAC,EAAD,QAGRQ,SAASC,eAAe,SFqHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1I,GACLoC,QAAQpC,MAAMA,EAAM2I,a,mBGxI5BC,EAAOC,QAAU,CAAC,eAAe,kCAAkC,MAAQ,8B","file":"static/js/main.c4dc3ff9.chunk.js","sourcesContent":["export const required = value => (value != null ? undefined : 'This field is required!')\r\nexport const number = value => value && isNaN(Number(value)) ? 'Must be a number' : undefined\r\nexport const maxLength = (max) => value => value.length > max ? `Max length of this message is ${max} characters` : undefined","import React, {useEffect, useState} from 'react'\r\nimport TableCell from \"@material-ui/core/TableCell\"\r\nimport TableRow from \"@material-ui/core/TableRow\"\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n    error: {\r\n        boxShadow: '0 0 3px red'\r\n    }\r\n})\r\n\r\nconst Product = ({id, name, count, cost, totalCost, removeProduct, changeProductCount, changeProductCost}) => {\r\n    const classes = useStyles()\r\n    const {error} = classes\r\n\r\n    const [isEditCount, setIsEditCount] = useState(false)\r\n    const [isEditCost, setIsEditCost] = useState(false)\r\n    const [isError, setIsError] = useState(false)\r\n    const [tempValue, setTempValue] = useState(null);\r\n\r\n    const onRemove = (id) => {\r\n        removeProduct(id)\r\n    }\r\n\r\n    const changeCount = (e) => {\r\n        if (e.key === 'Enter') {\r\n            if (tempValue != null) {\r\n                console.log(typeof +tempValue)\r\n                changeProductCount(id, +tempValue)\r\n                setIsEditCount(false)\r\n            } else {\r\n                setIsError(true)\r\n            }\r\n        }\r\n    }\r\n    const onChange = (e) => {\r\n        setTempValue(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <TableRow key={id}>\r\n            <TableCell component=\"th\"\r\n                       scope=\"row\">\r\n                {name}\r\n            </TableCell>\r\n            <TableCell align=\"right\"\r\n                       onDoubleClick={() => {\r\n                           setTempValue('')\r\n                           setIsEditCount(true)\r\n                       }}\r\n                       onBlur={() => {\r\n\r\n                           setIsEditCount(false)\r\n                       }}\r\n\r\n            >\r\n                {!isEditCount && count}\r\n                {isEditCount && <input className={(isError && error) || ''}\r\n                                       type=\"text\"\r\n                                       autoFocus={true}\r\n                                       onChange={onChange}\r\n                                       onKeyPress={changeCount}\r\n                />}\r\n            </TableCell>\r\n            <TableCell align=\"right\"\r\n                       onDoubleClick={() => {\r\n                           setIsEditCost(true)\r\n                           setTempValue('')\r\n                       }}\r\n                       onBlur={() => {\r\n                           setIsEditCost(false)\r\n                       }}\r\n\r\n            >\r\n                {!isEditCost && cost}\r\n                {isEditCost && <input className={(isError && error) || ''}\r\n                                      type=\"text\"\r\n                                      autoFocus={true}\r\n                                      onChange={onChange}\r\n                />}\r\n            </TableCell>\r\n            <TableCell align=\"right\">\r\n                {totalCost}\r\n            </TableCell>\r\n            <TableCell align=\"right\">\r\n                <IconButton aria-label=\"delete\"\r\n                            onClick={() => {\r\n                                onRemove(id)\r\n                            }}\r\n                >\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n            </TableCell>\r\n        </TableRow>\r\n    )\r\n}\r\n\r\nexport default Product","import React from 'react'\r\nimport styles from './CustomField.module.scss'\r\n\r\nconst CustomField = ({input,meta, meta: {touched, error}, ...props}) => {\r\n    let hasError = touched && error\r\n    let typeField = props.types\r\n    let {id} = props\r\n    return (\r\n        <div className={`${styles['custom-field']} ${hasError ? styles.error : ''}`}>\r\n            {typeField === 'input' && <input {...input} {...props} className={styles.input} id={id}/>}\r\n            {!typeField && <span> </span>}\r\n\r\n            {hasError && <div>{error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport  default  CustomField","import React from 'react'\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLength, number, required} from \"../../utils/validators/validators\";\r\nimport CustomField from \"../shared/CustomFIeld/CustomField\";\r\n\r\nconst max25 = maxLength(15)\r\n\r\nconst useStyles = makeStyles({\r\n    form: {\r\n        padding: 40,\r\n        background: 'aqua',\r\n        borderRadius: 10,\r\n        boxShadow: '0 0 10px gray'\r\n    },\r\n    inputGroup: {\r\n        marginBottom: 20,\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    input: {\r\n        marginLeft: 10,\r\n        borderRadius: 8,\r\n        border: '1px solid black',\r\n        padding: '6px 15px'\r\n    },\r\n    button: {\r\n        width: '100%'\r\n    },\r\n    classError: {\r\n        color: 'red',\r\n        textTransform: 'uppercase',\r\n        padding: 10\r\n    }\r\n});\r\n\r\n\r\nconst ProductCreator = ({handleSubmit, error}) => {\r\n    const classes = useStyles()\r\n    const {inputGroup, input, button, form, classError} = classes\r\n\r\n    return (\r\n        <>\r\n            <form className={form} onSubmit={handleSubmit}>\r\n                {error && <div className={classError}></div>}\r\n                <div className={inputGroup}>\r\n                    Product name:\r\n                    <Field className={input}\r\n                           type=\"text\"\r\n                           placeholder='Product name'\r\n                           name='name'\r\n                           component={CustomField}\r\n                           validate={[required, max25]}\r\n                           types='input'\r\n                    />\r\n                </div>\r\n                <div className={inputGroup}>\r\n                    Product count:\r\n                    <Field className={input}\r\n                           type=\"text\"\r\n                           placeholder='Product count'\r\n                           name='count'\r\n                           component={CustomField}\r\n                           validate={[required, number]}\r\n                           types='input'\r\n                    />\r\n                </div>\r\n                <div className={inputGroup}>\r\n                    Product cost:\r\n                    <Field className={input}\r\n                           type=\"text\"\r\n                           placeholder='Product cost'\r\n                           name='cost'\r\n                           component={CustomField}\r\n                           validate={[required, number]}\r\n                           types='input'\r\n                    />\r\n                </div>\r\n                <Button className={button}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        type='submit'\r\n                >Add product</Button>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nconst ProductCreatorForm = reduxForm({form: 'productCreator'})(ProductCreator)\r\n\r\n\r\nexport default ProductCreatorForm","const ADD_PRODUCT = 'shopBasket/ADD-PRODUCT';\r\nconst REMOVE_PRODUCT = 'shopBasket/REMOVE-PRODUCT';\r\nconst CHANGE_PRODUCT_COUNT = 'shopBasket/CHANGE-PRODUCT-COUNT';\r\nconst CHANGE_PRODUCT_COST = 'shopBasket/CHANGE-PRODUCT-COST';\r\n\r\nlet initialState = {\r\n    products: [\r\n        {id: 1, name: 'Alcatel', count: 3, cost: 30, totalCost: null},\r\n        {id: 2, name: 'Nokia', count: 1, cost: 40, totalCost: null},\r\n        {id: 3, name: 'Siemens C65', count: 2, cost: 1000, totalCost: null},\r\n    ],\r\n}\r\n\r\nlet appReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case ADD_PRODUCT:\r\n            let newProductId = state.products.map(product => product.id + 1)\r\n            return {\r\n                ...state,\r\n                products: [\r\n                    ...state.products,\r\n                    {id: newProductId, ...action}\r\n                ]\r\n            }\r\n        case REMOVE_PRODUCT:\r\n            return {\r\n                ...state,\r\n                products: state.products.filter(product => product.id !== action.id)\r\n            }\r\n\r\n        case CHANGE_PRODUCT_COUNT:\r\n            return {\r\n                ...state,\r\n                products: state.products.map(product => {\r\n                    if (product.id === action.id) {\r\n                        return {\r\n                            ...product,\r\n                            count: action.count,\r\n                            totalCost: product.cost * product.count\r\n                        }\r\n                    } else {\r\n                        return product\r\n                    }\r\n                })\r\n            }\r\n            case CHANGE_PRODUCT_COST:\r\n            return {\r\n                ...state,\r\n                products: state.products.map(product => {\r\n                    if (product.id === action.id) {\r\n                        return {\r\n                            ...product,\r\n                            cost: action.cost,\r\n                            totalCost: product.cost * product.count\r\n                        }\r\n                    } else {\r\n                        return product\r\n                    }\r\n                })\r\n            }\r\n\r\n        default:\r\n            return {\r\n                ...state,\r\n                products: state.products.map(product => {\r\n                    return {\r\n                        ...product,\r\n                        totalCost: product.cost * product.count\r\n                    }\r\n                })\r\n            }\r\n    }\r\n}\r\n\r\nexport const addProduct = ({name, count, cost}) => ({type: ADD_PRODUCT, name, count, cost})\r\nexport const removeProduct = (id) => ({type: REMOVE_PRODUCT, id})\r\nexport const changeProductCount = (id, count) => ({type: CHANGE_PRODUCT_COUNT, id, count})\r\nexport const changeProductCost = (id, cost) => ({type: CHANGE_PRODUCT_COST, id, cost})\r\n\r\n\r\nexport default appReducer","export const getAppProducts = (state) => state.app.products;","import React from 'react';\nimport './App.css';\nimport {connect} from \"react-redux\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport Table from \"@material-ui/core/Table\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport {makeStyles} from \"@material-ui/styles\";\nimport {Paper} from \"@material-ui/core\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport Product from \"./components/Product/Product\";\nimport ProductCreatorForm from \"./components/ProductCreator/ProductCreator\";\nimport {addProduct, changeProductCost, changeProductCount, removeProduct} from \"./redux/appReducer\";\nimport {getAppProducts} from \"./redux/appSelectors\";\n\nconst useStyles = makeStyles({\n\n    paper: {\n        maxWidth: 650,\n        boxShadow: '0 0 10px gray'\n    },\n    table: {\n        minWidth: 650,\n    },\n\n    body: {\n        height: '160px',\n        overflowY: 'auto',\n    },\n});\n\nconst App = ({products, addProduct, removeProduct, changeProductCount, changeProductCost}) => {\n    const classes = useStyles();\n    const {paper, table, body} = classes\n\n    const onSubmit = (data) => {\n        addProduct(data)\n    }\n    return (\n        <div className=\"App\">\n            <ProductCreatorForm onSubmit={onSubmit}/>\n            <div className=\"shopBasket\">\n                <TableContainer className={paper}\n                                component={Paper}\n                >\n                    <Table className={table}\n                           aria-label=\"simple table\"\n                    >\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Name</TableCell>\n                                <TableCell align=\"right\">Count</TableCell>\n                                <TableCell align=\"right\">Cost for 1</TableCell>\n                                <TableCell align=\"right\">Total Cost</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody className={body}>\n                            {products.map((row) => <Product {...row}\n                                                            key={row.id}\n                                                            removeProduct={removeProduct}\n                                                            changeProductCount={changeProductCount}\n                                                            changeProductCost={changeProductCost}\n                            />)}\n                        </TableBody>\n                        <tfoot>\n                        <TableRow>\n                            <TableCell colSpan={1}></TableCell>\n                            <TableCell colSpan={2}><b>Total Price</b></TableCell>\n                            <TableCell align=\"right\"> <b>\n                                {products.reduce((acc, {totalCost}) => (acc + totalCost), 0)}\n                            </b></TableCell>\n                        </TableRow>\n                        </tfoot>\n                    </Table>\n                </TableContainer>\n            </div>\n        </div>\n    );\n}\n\nlet mapStateToProps = (state) => ({\n    products: getAppProducts(state)\n})\nexport default connect(mapStateToProps, {addProduct, removeProduct, changeProductCount, changeProductCost})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport appReducer from \"./appReducer\";\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nlet reducers = combineReducers({\r\n    app: appReducer,\r\n    form: formReducer,\r\n})\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\nwindow.__store__ = store\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./redux/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"custom-field\":\"CustomField_custom-field__1cchg\",\"error\":\"CustomField_error__355yU\"};"],"sourceRoot":""}